package com.example.myapplication

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import com.example.myapplication.data.Product
import android.util.Log

class ProductDetailsFragment : Fragment() {
    companion object {
        private const val ARG_PRODUCT = "product"
        fun newInstance(product: Product): ProductDetailsFragment {
            val fragment = ProductDetailsFragment()
            val args = Bundle()
            args.putSerializable(ARG_PRODUCT, product)
            fragment.arguments = args
            return fragment
        }
    }

    private var product: Product? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        product = arguments?.getSerializable(ARG_PRODUCT) as? Product
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        Log.d("ProductDetailsFragment", "onCreateView –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product?.name}")
        return inflater.inflate(R.layout.fragment_product_details, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        product?.let { p ->
            view.findViewById<TextView>(R.id.productCardName)?.text = p.name
            view.findViewById<TextView>(R.id.productCardCalories)?.text = "–ö–∞–ª–æ—Ä–∏–∏: ${p.calories}"
            view.findViewById<TextView>(R.id.productCardProtein)?.text = "–ë–µ–ª–∫–∏: ${p.protein}–≥"
            view.findViewById<TextView>(R.id.productCardFat)?.text = "–ñ–∏—Ä—ã: ${p.fat}–≥"
            view.findViewById<TextView>(R.id.productCardCarbs)?.text = "–£–≥–ª–µ–≤–æ–¥—ã: ${p.carbs}–≥"
            view.findViewById<TextView>(R.id.productCardTags)?.text = getTagsString(p)
            view.findViewById<TextView>(R.id.productCardAllergens)?.text = getAllergensString(p)
        }
    }

    private fun getTagsString(p: Product): String {
        val tags = mutableListOf<String>()
        if (p.isProteinTag) tags.add("–ë–µ–ª–∫–æ–≤–æ–µ ü•©")
        if (p.isFastTag) tags.add("–ë—ã—Å—Ç—Ä–æ–µ ‚è±Ô∏è")
        if (p.isVeganTag) tags.add("–í–µ–≥–∞–Ω üå±")
        if (p.isVegetarianTag) tags.add("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü ü•ó")
        if (p.isSeaTag) tags.add("–ú–æ—Ä—Å–∫–æ–µ üêü")
        if (p.isLightTag) tags.add("–õ—ë–≥–∫–æ–µ üíß")
        if (p.isBreakfastTag) tags.add("–ó–∞–≤—Ç—Ä–∞–∫ ‚òÄÔ∏è")
        if (p.isLunchTag) tags.add("–û–±–µ–¥ üç≤")
        if (p.isDinnerTag) tags.add("–£–∂–∏–Ω üåô")
        if (p.isSnackTag) tags.add("–ü–µ—Ä–µ–∫—É—Å üç™")
        if (p.isPeanutTag) tags.add("–ê—Ä–∞—Ö–∏—Å ü•ú")
        if (p.isFruitsTag) tags.add("–§—Ä—É–∫—Ç—ã üçè")
        if (p.isChocolateTag) tags.add("–®–æ–∫–æ–ª–∞–¥ üç´")
        if (p.isBerriesTag) tags.add("–Ø–≥–æ–¥—ã üçì")
        if (p.isVegetablesTag) tags.add("–û–≤–æ—â–∏ ü•¶")
        return if (tags.isNotEmpty()) "–¢–µ–≥–∏: ${tags.joinToString(", ")}" else "–¢–µ–≥–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    }

    private fun getAllergensString(p: Product): String {
        val allergens = mutableListOf<String>()
        if (!p.isGlutenFree) allergens.add("–ì–ª—é—Ç–µ–Ω")
        if (!p.isLactoseFree) allergens.add("–õ–∞–∫—Ç–æ–∑–∞")
        if (!p.isNutsFree) allergens.add("–û—Ä–µ—Ö–∏")
        if (!p.isEggsFree) allergens.add("–Ø–π—Ü–∞")
        if (!p.isFishFree) allergens.add("–†—ã–±–∞")
        return if (allergens.isNotEmpty()) "–ê–ª–ª–µ—Ä–≥–µ–Ω—ã: ${allergens.joinToString(", ")}" else "–ë–µ–∑ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤"
    }
} 